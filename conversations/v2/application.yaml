openapi: '3.0.0'
info:
  title: Webhook Configuration
  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '2.11'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-major-version: v2
  x-postman-collection: postman.zip
servers:
  - url: https://api.tyntec.com/chat-api/v2
security:
  - ApiKeyHeader: [ ]
tags:
  - name: "Applications"
    description: |
      An application allows you to freely define which events should be sent via a callback URL to your webhook
      implementation. You may use a single callback URL for all event types or separate callback URLs for custom sets
      of event types.

      **Important**

       - By now, only a single application (the default application) is supported. The extension to custom applications is planned in future releases.
       - The API merges events pointing to the same callback URL into one set.
       - When an update of a callback URL is executed, the whole webhook definition is restated.

      The MoMessage::Postback event is treated as a MoMessage event for the purpose of callback lookups.
paths:
  /applications:
    get:
      tags:
        - "Applications"
      summary: List all applications
      operationId: listApplications
      description: Lists all applications with their webhooks configured for the API key.
      responses:
        200:
          description: List of applications. Will never be empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
  /applications/default:
    get:
      tags:
        - "Applications"
      summary: Read the default application
      operationId: getDefaultApplication
      description: Returns the default application configured for the API key with details about its webhooks.
      responses:
        200:
          description: Current definition of the default application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultApplicationResponse'
    patch:
      tags:
        - "Applications"
      summary: Update the default application
      operationId: updateDefaultApplication
      description: |
        Defines webhooks in the default application by associating specified callback URLs with specified event types.
        The operation will replace callback URLs on specified event types with the new callback URLs.
        Omitted event types will remain associated with the previous callback URLs.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefaultApplicationUpdate"
      responses:
        204:
          description: Webhooks were saved successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/Default'
components:
  securitySchemes:
    ApiKeyHeader:
      type: apiKey
      in: header
      name: apikey
      description: |
        The API key used for this operation. We also check that the API key has a phone number assigned
        (either for sending messages or interacting with other phone-number based features).
  responses:
    Default:
      description: The default response in the case of any other error. Check the *Problem* object for details.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Check the *Problem* object for details.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations: [
              {
                field: validate.request.whatsapp.contentType,
                message: must not be empty
              }
            ]
            title: Constraint Violation
  schemas:
    EventTypes:
      type: string
      description: Determines the event type emitted by the API.
      enum:
        - MoMessage
        - MessageStatus::accepted
        - MessageStatus::channelFailed
        - MessageStatus::deleted
        - MessageStatus::delivered
        - MessageStatus::failed
        - MessageStatus::seen
        - MessageStatus::unknown
    Problem:
      type: object
      additionalProperties: true
      description: The problem object follows [RFC 7807](https://tools.ietf.org/html/rfc7807).
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          description: A URI reference [RFC 3986](https://tools.ietf.org/html/rfc3986) that identifies the problem type
          example: https://docs.tyntec.com/problems/DataNotParseable
          type: string
        title:
          type: string
          example: Data given was not parsable
          description: A short, human-readable summary of the problem type.
        status:
          description: The HTTP status code ([RFC 7231](https://tools.ietf.org/html/rfc7231), Section 6) generated by the origin server for this occurrence of the problem.
          type: string
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: |
            Unexpected end-of-input: expected close marker for Object (start marker at [Source: UNKNOWN; line: -1, column: -1) at [Source: UNKNOWN; line: 1, column: 97]
    DefaultApplicationUpdate:
      type: object
      description: Update of the default application
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      example:
        webhooks:
          - events:
              - MoMessage
            callbackUrl: https://some-call-back.service.com
          - events:
              - MessageStatus::deleted
              - MessageStatus::accepted
            callbackUrl: https://some-other-call-back.service.com
    ApplicationList:
      type: array
      description: List of configured applications. It is never empty.
      items:
        anyOf:
          - $ref: '#/components/schemas/DefaultApplicationResponse'
      minItems: 1
    DefaultApplicationResponse:
      type: object
      description: The default application
      properties:
        id:
          type: string
          description: The default application ID
          enum:
            - default
        name:
          type: string
          description: The default application name
          enum:
            - Default Application
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
          minLength: 1
      example:
        id: default
        name: Default Application
        webhooks:
          - events:
              - MoMessage
            callbackUrl: https://some-call-back.service.com
          - events:
              - MessageStatus::deleted
              - MessageStatus::accepted
            callbackUrl: https://some-other-call-back.service.com
    Webhook:
      description: >
        A webhook associates one or more event types to a callback URL. In other words,
        it specifies where the events of those types should be forwarded to.
      type: object
      properties:
        events:
          description: >
            An array of event types, by which this webhook should be triggered. You may use an empty array to set the default webhook for all event types that aren't assigned specifically. Such webhook will be triggered on every event, for which another webhook doesn't exist that is specific to this event type.
          type: array
          items:
            $ref: "#/components/schemas/EventTypes"
          minLength: 0
        callbackUrl:
          type: string
          pattern: "^https://.*"
          description: The URL to forward the event to. Callback URLs should start with `https://`.
          example:
            https://some-call-back.service.com
      example:
        events:
          - MessageStatus::deleted
          - MessageStatus::accepted
        callbackUrl: https://some-other-call-back.service.com
