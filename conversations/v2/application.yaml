openapi: '3.0.0'
info:
  title: Webhooks
  description: |
    Conversations allows you to easily send messages to your customers via messaging services like WhatsApp
    and still reach customers with classic SMS.
    In addition you can define a chain of channels which will be used for messaging attempts until one succeeds.
    Notifications and messages from your users are send by us to your system via HTTP ```POST``` method.

    **Channel specific pre-conditions**

    - *2-way SMS* : Please contact us to get the details for the 2-way SMS setup
    - *WhatsApp* : A WhatsApp Business Account is required in order to use this channel. Please [request access here](https://www.tyntec.com/form-whatsapp-setup-your-waba)
    - *Viber* : A Viber Service id is required in order to use this channel. Please [request access here](https://www.tyntec.com/form-conversational-api-viber-business)

    **Adheared web-standards**
    One goal of the API is to follow best practices and standards around http based services.
    A building block of this is to follow the RFCs:
    - [RFC 5988 - Web Linking](https://tools.ietf.org/html/rfc5988)
    - [RFC 7807 - Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807)

    *RFC 5988* is implemented in a way that all API calls that return a list of resources, make use of the following Link headers
    - `first` : First page of the resource list pagination
    - `previous` : Predecessor page of the current page of the resource list pagination
    - `current` : Actual page of the resource list pagination
    - `next` : Successor page of the current of page of the resource list pagination
    - `last` : Last page of the resource list pagination

    In addition the following custom headers are provided for convenience
    - `x-total-pages` : Total number of pages of the list of requested sub-resources
    - `x-total-items` : Total number of items on the list of requested sub-resources
    - `x-page-size` : Maxium size of the page
    - `x-current-page` : Page number of the current page of the list of requested sub-resources

  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '2.11'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-major-version: v2
  x-postman-collection: postman.zip
servers:
  - url: https://api.tyntec.com/chat-api/v2
security:
  - ApiKeyAuth: [ ]
tags:
  - name: "Applications"
    description: |
      Conversations allows you to freely define which events should be sent via a callback URL to your webhook
      implementation.

      **Please note**:

       - By now, only a default application is supported. The extension to custom applications is planned for future releases
       - The API merges events pointing to the same callback URL into one set.
       - When an update of a callback URL is executed, the whole webhook definition must be restated.
paths:
  /applications:
    get:
      tags:
        - "Applications"
      summary: List all applications
      operationId: listApplications
      description: Lists all applications configured for the APIKey
      responses:
        200:
          description: List of applications. Will never be empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
  /applications/default:
    get:
      tags:
        - "Applications"
      summary: Get default application
      operationId: getDefaultApplication
      description: Returns default application configured for the APIKey
      responses:
        200:
          description: Current definition of the default application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultApplicationResponse'
    patch:
      tags:
        - "Applications"
      summary: Update default application
      operationId: updateDefaultApplication
      description: |
        The operation will save the specified webhooks. Makes merge(replacement)
        operation on existing event types for newly defined webhooks.
        Any other event type of the existing webhooks will remain associated
        with the previous callback URL.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefaultApplicationUpdate"
      responses:
        204:
          description: Webhooks have been successfully saved.
        400:
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/Default'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: |
        The API key used for this operation. We check as well that the API key has the phone number
        (either on sending messages or interacting with other phone number based features) assigned.
  responses:
    Default:
      description: Default response in case of any other error. Please check the error object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Please check the Problems object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations: [
              {
                field: validate.request.whatsapp.contentType,
                message: must not be empty
              }
            ]
            title: Constraint Violation
  schemas:
    EventTypes:
      type: string
      description: Determines which kind of event is emitted by the API
      enum:
        - MoMessage
        - MoMessage::Postback
        - MessageStatus::accepted
        - MessageStatus::channelFailed
        - MessageStatus::deleted
        - MessageStatus::delivered
        - MessageStatus::failed
        - MessageStatus::seen
        - MessageStatus::unknown
    Problem:
      type: object
      additionalProperties: true
      description: The problem object follows the RFC-7807 (https://tools.ietf.org/html/rfc7807)
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          description: A URI reference [RFC3986] that identifies the problem type
          example: https://docs.tyntec.com/problems/DataNotParseable
          type: string
        title:
          type: string
          example: Data given was not parseable
          description: A short, human-readable summary of the problem type.
        status:
          description: The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
          type: string
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: |
            Unexpected end-of-input: expected close marker for Object (start marker at [Source: UNKNOWN; line: -1, column: -1) at [Source: UNKNOWN; line: 1, column: 97]
    DefaultApplicationUpdate:
      type: object
      description: Update of the default application
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      example:
        webhooks:
          - events:
              - MoMessage
            callbackUrl: https://some-call-back.service.com
          - events:
              - MessageStatus::deleted
              - MessageStatus::accepted
            callbackUrl: https://some-other-call-back.service.com
    ApplicationList:
      type: array
      description: List of configured applications. Never be empty
      items:
        anyOf:
          - $ref: '#/components/schemas/DefaultApplicationResponse'
      minItems: 1
    DefaultApplicationResponse:
      type: object
      description: The default application
      properties:
        id:
          type: string
          description: The default application ID
          enum:
            - default
        name:
          type: string
          description: The default application name
          enum:
            - Default Application
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
          minLength: 1
      example:
        id: default
        name: Default Application
        webhooks:
          - events:
              - MoMessage
            callbackUrl: https://some-call-back.service.com
          - events:
              - MessageStatus::deleted
              - MessageStatus::accepted
            callbackUrl: https://some-other-call-back.service.com
    Webhook:
      description: >
        A webhook associates one or more event types to a callback URL. In other words,
        it specifies where the events of those types should be forwarded to.
      type: object
      properties:
        events:
          description: >
            The types of events that this webhook should be triggered. Note that, although mandatory,
            the array can be empty. In such a case, the webhook will be triggered on every
            event, if no other webhook specific to the type of the event exists.
          type: array
          items:
            $ref: "#/components/schemas/EventTypes"
          minLength: 0
        callbackUrl:
          type: string
          pattern: "^https://.*"
          description: The URL to forward the event to. Callback URLs should start with 'https://'.
          example:
            https://some-call-back.service.com
      example:
        events:
          - MessageStatus::deleted
          - MessageStatus::accepted
        callbackUrl: https://some-other-call-back.service.com
