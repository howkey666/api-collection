openapi: '3.0.0'
info:
  title: Configurations
  contact:
    name: tyntec API Support
    url: http://www.tyntec.com/support
    email: support@tyntec.com
  version: '3.0'
  x-repository: https://github.com/tyntec/api-collection/blob/master/conversations
  x-specification-file: configurations.yaml
  x-major-version: v3
servers:
  - url: https://api.tyntec.com/conversations/v3
security:
  - ApiKeyAuth: [ ]
tags:
  - name: "Configurations"
    description: |
      The Configurations allows you to setup certain parts of settings on account or channel level.

      Included are callback settings, credentials (where appropriate) and a signature for incoming events.

      #### Credentials

      Some channels require you to provide tyntec with credentials, for example telegram bots or WeChat applications.
      Conversations allows you to configure these credentials via the API directly

      #### Signature

      Validating that the message content hasn't been tampered is a crucial part of a secure
      message exchange.

      Conversations can provide you with a message signature that encrypts the actual event
      content with a keyed-hash message authentication code [HMAC](https://en.wikipedia.org/wiki/HMAC).

      The signature is transfered in the header `x-signature` as a Base64 URL encoded value.

      As a preparation both parties need to align on

      - the algorithm used
      - the shared secret

      With these information, the request timestamp (header `x-request-timestamp`), the signature version (header `x-signature-version`)
      and the actual event we calculate the signature.

      If you want to check if the message has been tampered on transmission you need to calculate the
      signature yourself and compare it with the signature provided in the header `x-signature`.

      The following pseudo code examples show you how to calculate the signature

      **Signature version: V1.0**

      <pre class="inline-code">
        secret = "secret key"
        algorithm = "SHA256"

        requestTimestamp = request.headers["x-request-timestamp"]
        body = request.body // String representation without any modifications

        data = requestTimestamp + "\n" + body
        signature_bytes = HMAC(algorithm, secret, data)

        tt_signature = request.headers["x-signature"]
        if (Base64URLEncode(signature_bytes) == tt_signature)
        then
          echo "Verified"
        else
          echo "Tampered!"
        fi
      </pre>

      We advise as well to verify if the request timestamp is not too old (couple of minutes at most) and discard
      the message otherwise.

paths:
  /configurations:
    get:
      tags:
        - "Configurations"
      summary: Get account configuration
      operationId: getAccountConfiguration
      description: Returns the configuration of the API account
      responses:
        200:
          description: Configuration of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
  /callback:
    put:
      tags:
        - "Configurations"
      summary: Update the callback
      operationId: updateAccountCallback
      description: Update the callback settings of the account. **Note** The complete object must be provided
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Callback'
      responses:
        200:
          description: Configuration of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfiguration'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: |
        The API key used for this operation. We check as well that the API key has the phone number
        (either on sending messages or interacting with other phone number based features) assigned.
  responses:
    Default:
      description: Default response in case of any other error. Please check the error object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: The request does not match our expectations. Please check the Problems object for details
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            status: 400
            violations: [
              {
                field: validate.request.whatsapp.contentType,
                message: must not be empty
              }
            ]
            title: Constraint Violation
  schemas:
    AccountConfiguration:
      type: object
      description: Configuration of an API account
      properties:
        scopes:
          $ref: '#/components/schemas/AccountScopes'
        callback:
          $ref: '#/components/schemas/Callback'
    AccountScopes:
      type: string
      description: Scopes available to your account.
      enum:
        - channels:read
        - channels.telegram:write
        - channels.wechat:write
        - callbacks:read
        - callbacks:write
        - media:read
        - media:write
    Callback:
      type: object
      description: Configuration of callbacks to your system
      properties:
        callbackVersion:
          type: string
          description: Event version to be used.
          enum:
            - 2.11
        signature:
          $ref: '#/components/schemas/Signature'
        header:
          $ref: '#/components/schemas/Header'
        inboundMessageUrl:
          type: string
          description: Webhook for events related to inbound messages
          pattern: "^https://.*"
          maxLength: 2000
        messageStatusUrl:
          type: string
          description: Webhook for events related to message status changes
          pattern: "^https://.*"
          maxLength: 2000
        eventFilter:
          type: array
          description: |
            List of status events to listen on. If empty all events are submitted.
          items:
            $ref: "#/components/schemas/EventTypes"
          minLength: 0
          default: []
    EventTypes:
      type: string
      description: Determines which kind of event is emitted by the API
      enum:
        - MessageStatus::accepted
        - MessageStatus::channelFailed
        - MessageStatus::deleted
        - MessageStatus::delivered
        - MessageStatus::failed
        - MessageStatus::seen
        - MessageStatus::unknown
    Signature:
      type: object
      description: |
        Signature configuration for incoming events. Can be disabled by setting the
        signature property to empty.
      required:
        - secret
        - method
      properties:
        secret:
          type: string
          description: Shared secret key
          minLength: 8
          maxLength: 125
        method:
          type: string
          description: cryptographic algorithm used for the signature calculation
          enum:
            - HS256
            - HS512
    Header:
      type: object
      description: |
        Additional custom header to be send with the event transmission. Can be used for setting
        authentication tokens, or similar.
      required:
        - key
        - value
      properties:
        key:
          description: name of the http header
          type: string
        value:
          type: string
          description: value of the http header
          minLength: 8
          maxLength: 125
    Problem:
      type: object
      additionalProperties: true
      description: The problem object follows the RFC-7807 (https://tools.ietf.org/html/rfc7807)
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          description: A URI reference [RFC3986] that identifies the problem type
          example: https://docs.tyntec.com/problems/DataNotParseable
          type: string
        title:
          type: string
          example: Data given was not parseable
          description: A short, human-readable summary of the problem type.
        status:
          description: The HTTP status code (RFC7231, Section 6) generated by the origin server for this occurrence of the problem.
          type: string
          example: 400
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: |
            Unexpected end-of-input: expected close marker for Object (start marker at [Source: UNKNOWN; line: -1, column: -1) at [Source: UNKNOWN; line: 1, column: 97]